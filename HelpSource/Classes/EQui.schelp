TITLE:: EQui
summary:: Easy 7 band Parametric EQ with auto GUI
categories:: GUI
related:: Classes/UserView, Classes/BEQSuite

DESCRIPTION::
EQui lets you quickly create a parametric EQ on the output of a given UGen. It takes a target, which must understand the set message as setting a link::Classes/NamedControl:: (so a Synth or and Ndef, or similar). The link::Classes/UGen#-equi:: method creates the necessary EQ UGens processing the receiver. The use of a prefix arg allows the creation of multiple EQuis within the same Synth. The EQ UGens are from the link::Classes/BEQSuite::, and consist of a link::Classes/BLowShelf::, three link::Classes/BPeakEQ::s, and a link::Classes/BHishelf::. ht to Wouter Snoei whose MasterEQ formed the basis for this!


CLASSMETHODS::

PRIVATE:: viewClass, sizeHint

METHOD:: new
Create a new EQui.

ARGUMENT:: parent
An optional parent link::Classes/View::.

ARGUMENT:: bounds
A link::Classes/Rect:: or link::Classes/Point:: specifying the bounds of the EQui.

ARGUMENT:: target
A link::Classes/Synth:: or similar object (e.g. link::Classes/Ndef::) that will receive changes in this EQui's parameters. Generally one or more UGens in this will have received the link::Classes/UGen-equi:: message with the same prefix used here.

ARGUMENT:: params
An optional instance of link::Classes/EQuiParams:: containing initial parameter values.

ARGUMENT:: prefix
An optional link::Classes/String:: to use as a prefix to Control names. This is only necessary to distinguish when using multiple EQuis with the same synth.

ARGUMENT:: sampleRate
The sample rate at which target is running. If not specified, this will use Server.default.options.sampleRate. This is necessary to calculate responses correctly.

returns:: A new EQui.


INSTANCEMETHODS::

PRIVATE:: init, doAction

METHOD:: target
Get or set this EQui's target (see above).

ARGUMENT:: intarget


METHOD:: sync
Sync this EQui with the current state of its target.

METHOD:: valueAction
Set this EQui's parameters to new values without setting the target, or triggering the action.

ARGUMENT:: inparams
An instance of link::Classes/EQuiParams::.

METHOD:: value
Get or set this EQui's link::Classes/EQuiParams::. The getter returns a copy.

ARGUMENT:: inparams
An instance of link::Classes/EQuiParams::.

METHOD:: set
Set one or more named parameters to new values, triggering the action. Possible parameters are 'hiPassFreq', 'hiPassGain', 'hiPassRq', 'hiPassBypass', 'loShelfFreq', 'loShelfGain', 'loShelfRs', 'loShelfBypass', 'loPeakFreq', 'loPeakGain', 'loPeakRq', 'loPeakBypass', 'midPeakFreq', 'midPeakGain', 'midPeakRq', 'midPeakBypass', 'hiPeakFreq', 'hiPeakGain', 'hiPeakRq', 'hiPeakBypass', 'hiShelfFreq', 'hiShelfGain', 'hiShelfRs', 'hiShelfBypass', 'loPassFreq', 'loPassGain', 'loPassRq' and 'loPassBypass'.



ARGUMENT::  ... pairs
Pairs of parameter names and values. Names must be preceded by a prefix if one was supplied in *new.



EXAMPLES::

code::
//////// Basic functionality

(
SynthDef(\testEQui, {
	Out.ar(0, WhiteNoise.ar(0.1).equi);
}).add;
)

(
x = Synth(\testEQui);
e = EQui(target: x); // change the GUI; alt-drag changes q
)

p = e.value.postcs; // get an EQuiParams representing the current state, post compile string to the window

x.set(\midPeakGain, 6, \hiPeakGain, -6); // change values on synth
e.sync; // sync the EQui

// You can enable and disable filter by setting the bypass value for the corresponding filter
x.set(\hiPassBypass, 0,\loShelfBypass, 1, \loPeakBypass, 1, \midPeakBypass, 1, \hiPeakBypass, 1, \hiShelfBypass, 1, \loPassBypass, 0); // change values on synth - this will bypass every filter except low pass and high pass filter
e.sync; // sync the EQui

e.valueAction = p; // reset to params stored in p, and update target

e.valueAction = EQuiParams(345.0, -15.0, 1, 250, 0, 1, 900.0, 16.25, 1, 3500, 0, 1, 2634.0, -24.0, 1); // set to some manually created params

x.free

//////// With an Array of UGens

x = { Saw.ar([120, 121], 0.1).equi }.play; // a stereo EQui
EQui(target: x);

x.free;

//////// Multiple EQuis in the same target

x = { [Saw.ar(120, 0.1).equi(prefix: "saw-"), GrayNoise.ar(0.1).equi(prefix: "noise-")] }.play; // a stereo EQui
(
EQui(target: x, prefix: "saw-");
EQui(target: x, prefix: "noise-");
)

x.free;

//////// With an Ndef

Ndef(\clipnoise, { ClipNoise.ar(0.1) }).play;

Ndef(\clipnoise).equi; // adds \filter -> equi at index 1000 by default

Ndef(\clipnoise).clear;
::
